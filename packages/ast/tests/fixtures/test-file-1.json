[
  {
    type: 'ExportDefaultDeclaration',
    span: { start: 26, end: 237, ctxt: 0 },
    decl: {
      type: 'ClassExpression',
      identifier: {
        type: 'Identifier',
        span: { start: 47, end: 57, ctxt: 0 },
        value: 'MyResolver',
        optional: false
      },
      span: { start: 41, end: 237, ctxt: 0 },
      decorators: [],
      body: [
        {
          type: 'ClassMethod',
          span: { start: 85, end: 235, ctxt: 0 },
          key: {
            type: 'Identifier',
            span: { start: 92, end: 96, ctxt: 0 },
            value: 'main',
            optional: false
          },
          function: {
            params: [
              {
                type: 'Parameter',
                span: { start: 97, end: 119, ctxt: 0 },
                decorators: [],
                pat: {
                  type: 'Identifier',
                  span: { start: 97, end: 119, ctxt: 0 },
                  value: 'arg1',
                  optional: false,
                  typeAnnotation: {
                    type: 'TsTypeAnnotation',
                    span: { start: 101, end: 119, ctxt: 0 },
                    typeAnnotation: {
                      type: 'TsUnionType',
                      span: { start: 103, end: 119, ctxt: 0 },
                      types: [
                        {
                          type: 'TsKeywordType',
                          span: { start: 103, end: 109, ctxt: 0 },
                          kind: 'number'
                        },
                        {
                          type: 'TsKeywordType',
                          span: { start: 112, end: 119, ctxt: 0 },
                          kind: 'boolean'
                        }
                      ]
                    }
                  }
                }
              },
              {
                type: 'Parameter',
                span: { start: 121, end: 133, ctxt: 0 },
                decorators: [],
                pat: {
                  type: 'Identifier',
                  span: { start: 121, end: 133, ctxt: 0 },
                  value: 'arg2',
                  optional: false,
                  typeAnnotation: {
                    type: 'TsTypeAnnotation',
                    span: { start: 125, end: 133, ctxt: 0 },
                    typeAnnotation: {
                      type: 'TsKeywordType',
                      span: { start: 127, end: 133, ctxt: 0 },
                      kind: 'string'
                    }
                  }
                }
              },
              {
                type: 'Parameter',
                span: { start: 135, end: 147, ctxt: 0 },
                decorators: [],
                pat: {
                  type: 'Identifier',
                  span: { start: 135, end: 147, ctxt: 0 },
                  value: 'arg3',
                  optional: true,
                  typeAnnotation: {
                    type: 'TsTypeAnnotation',
                    span: { start: 140, end: 147, ctxt: 0 },
                    typeAnnotation: {
                      type: 'TsArrayType',
                      span: { start: 142, end: 147, ctxt: 0 },
                      elemType: {
                        type: 'TsKeywordType',
                        span: { start: 142, end: 145, ctxt: 0 },
                        kind: 'any'
                      }
                    }
                  }
                }
              }
            ],
            decorators: [],
            span: { start: 85, end: 235, ctxt: 0 },
            body: {
              type: 'BlockStatement',
              span: { start: 149, end: 235, ctxt: 0 },
              stmts: [
                {
                  type: 'ReturnStatement',
                  span: { start: 155, end: 231, ctxt: 0 },
                  argument: {
                    type: 'ObjectExpression',
                    span: { start: 162, end: 231, ctxt: 0 },
                    properties: [
                      {
                        type: 'Identifier',
                        span: { start: 170, end: 174, ctxt: 0 },
                        value: 'arg1',
                        optional: false
                      },
                      {
                        type: 'Identifier',
                        span: { start: 182, end: 186, ctxt: 0 },
                        value: 'arg2',
                        optional: false
                      },
                      {
                        type: 'KeyValueProperty',
                        key: {
                          type: 'Identifier',
                          span: { start: 194, end: 198, ctxt: 0 },
                          value: 'arg3',
                          optional: false
                        },
                        value: {
                          type: 'ConditionalExpression',
                          span: { start: 200, end: 225, ctxt: 0 },
                          test: {
                            type: 'Identifier',
                            span: { start: 200, end: 204, ctxt: 0 },
                            value: 'arg3',
                            optional: false
                          },
                          consequent: {
                            type: 'Identifier',
                            span: { start: 207, end: 211, ctxt: 0 },
                            value: 'arg3',
                            optional: false
                          },
                          alternate: {
                            type: 'ArrayExpression',
                            span: { start: 214, end: 225, ctxt: 0 },
                            elements: [
                              {
                                spread: null,
                                expression: {
                                  type: 'StringLiteral',
                                  span: { start: 215, end: 224, ctxt: 0 },
                                  value: 'NOTHING',
                                  raw: "'NOTHING'"
                                }
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            },
            generator: false,
            async: false,
            typeParameters: null,
            returnType: null
          },
          kind: 'method',
          isStatic: false,
          accessibility: 'public',
          isAbstract: false,
          isOptional: false,
          isOverride: false
        }
      ],
      superClass: null,
      isAbstract: false,
      typeParams: null,
      superTypeParams: null,
      implements: []
    }
  }
]
