{
  "version": 3,
  "sources": ["../constants/src/base.mjs", "../constants/src/socket.mjs", "src/constants.ts", "src/base/406-error.ts", "src/base/500-error.ts", "src/base/forbidden-error.ts", "src/base/authorisation-error.ts", "src/base/contract-auth-error.ts", "src/base/resolver-app-error.ts", "src/base/resolver-not-found-error.ts", "src/base/enum-error.ts", "src/base/type-error.ts", "src/base/checker-error.ts", "src/base/validation-error.ts", "src/base/error.ts", "src/base/server-error.ts", "src/base/general-error.ts", "src/fn/final-catch.ts", "src/fn/get-error-by-status.ts", "src/fn/get-error-name-by-instance.ts"],
  "sourcesContent": ["export const EXT = 'js' // we might do a ts in the future\nexport const TS_EXT = 'ts'\n\nexport const HELLO = 'Hello world!'\nexport const HELLO_FN = 'helloWorld'\n// the core stuff to id if it's calling with jsonql\nexport const DATA_KEY = 'data'\nexport const ERROR_KEY = 'error'\nexport const HEADERS_KEY = 'headers'\n\nexport const JSONQL_PATH = 'jsonql'\n// according to the json query spec\nexport const CONTENT_TYPE = 'application/vnd.api+json'\nexport const CHARSET = 'charset=utf-8'\nexport const DEFAULT_HEADER = {\n  'Accept': CONTENT_TYPE,\n  'Content-Type': [ CONTENT_TYPE, CHARSET ].join('')\n}\n\n// export const INDEX = 'index' use INDEX_KEY instead\nexport const DEFAULT_TYPE = 'any'\n// contract file names\n// export const DEFAULT_FILE_NAME = 'contract.json' // @TODO remove once all changed\n// export const PUBLIC_FILE_NAME = 'public-contract.json' // @TODO remove once all changed\nexport const DEFAULT_CONTRACT_FILE_NAME = 'contract.json'\nexport const PUBLIC_CONTRACT_FILE_NAME = 'public-contract.json'\n// this is for the ES6 module import and export @TODO remove later\nexport const DEFAULT_RESOLVER_LIST_FILE_NAME = 'resolver.js'\nexport const DEFAULT_RESOLVER_IMPORT_FILE_NAME = 'import.js'\n\nexport const MODULE_TYPE = 'module'\nexport const SCRIPT_TYPE = 'script'\n\n// @TODO remove this is not in use\n// export const CLIENT_CONFIG_FILE = '.clients.json'\n// export const CONTRACT_CONFIG_FILE = 'jsonql-contract-config.js'\n// type of resolvers\nexport const QUERY_NAME = 'query'\nexport const MUTATION_NAME = 'mutation'\nexport const SOCKET_NAME = 'socket'\n// we need to add a new field to the contract so it won't create confusion\nexport const SOCKET_AUTH_NAME = 'socket-auth'\n// the following are for the next development features\nexport const EXTERNAL_NAME = 'external'\nexport const INTERCEPTOR_NAME = 'interceptor'\nexport const PLUGIN_NAME = 'plugin'\nexport const CONTRACT_NAME = 'contract'\nexport const MIDDLEWARE_NAME = 'middleware'\n\nexport const RESOLVER_TYPES = [\n  QUERY_NAME,\n  MUTATION_NAME,\n  SOCKET_NAME,\n  SOCKET_AUTH_NAME\n]\n// for calling the mutation\nexport const PAYLOAD_PARAM_NAME = 'payload' // @TODO shortern them\nexport const CONDITION_PARAM_NAME = 'condition'\nexport const RESOLVER_PARAM_NAME = 'resolverName'\nexport const QUERY_ARG_NAME = 'args'\nexport const TIMESTAMP_PARAM_NAME = 'TS'\nexport const MUTATION_ARGS = [\n  RESOLVER_PARAM_NAME,\n  PAYLOAD_PARAM_NAME,\n  CONDITION_PARAM_NAME\n]\n// new jsonp\nexport const JSONP_CALLBACK_NAME = 'jsonqlJsonpCallback'\n\n// methods allow\nexport const API_REQUEST_METHODS = ['POST', 'PUT']\nexport const CONTRACT_REQUEST_METHODS = ['GET', 'HEAD']\n// for  contract-cli\nexport const KEY_WORD = 'continue'\nexport const PUBLIC_KEY = 'public'\nexport const PRIVATE_KEY = 'private'\n\n\n// author\nexport const AUTH_TYPE = 'auth'\nexport const AUTH_NAME = AUTH_TYPE // alias\nexport const LOGIN_FN_NAME = 'login'\n// export const ISSUER_NAME = LOGIN_NAME // legacy issue need to replace them later\nexport const LOGOUT_FN_NAME = 'logout'\nexport const VALIDATOR_FN_NAME = 'validator'\nexport const DISCONNECT_FN_NAME = 'disconnect'\nexport const SWITCH_USER_FN_NAME = 'switch-user'\n\nexport const AUTH_HEADER = 'Authorization'\nexport const AUTH_CHECK_HEADER = 'authorization' // this is for checking so it must be lowercase\nexport const BEARER = 'Bearer'\n\n// for client use @TODO need to clean this up some of them are not in use\nexport const CREDENTIAL_STORAGE_KEY = 'jsonqlcredential'\nexport const CLIENT_STORAGE_KEY = 'jsonqlstore'\nexport const CLIENT_AUTH_KEY = 'jsonqlauthkey'\n// for id the multiple storage engine\nexport const INDEX_KEY = 'index'\n// contract key\nexport const CONTRACT_KEY_NAME = 'X-JSONQL-CV-KEY'\nexport const SHOW_CONTRACT_DESC_PARAM = {desc: 'y'}\n// directories\nexport const DEFAULT_RESOLVER_DIR = 'resolvers'\nexport const DEFAULT_CONTRACT_DIR = 'contracts'\nexport const DEFAULT_KEYS_DIR = 'keys'\n// add in V1.3.4 start supporting socket\n\n// for validation\nexport const CJS_TYPE = 'cjs'\nexport const ES_TYPE = 'es'\nexport const TS_TYPE = 'ts'\nexport const ACCEPTED_JS_TYPES = [\n  CJS_TYPE,\n  ES_TYPE\n] // not accept this TS_TYPE at the moment\n\n// for contract cli\nexport const RETURN_AS_FILE = 'file'\nexport const RETURN_AS_JSON = 'json'\nexport const RETURN_AS_ENUM = [\n  RETURN_AS_FILE,\n  RETURN_AS_JSON\n]\n\nexport const NO_ERROR_MSG = 'No message'\nexport const NO_STATUS_CODE = -1\n\n// status\nexport const SUCCESS_STATUS = 200\nexport const UNAUTHORIZED_STATUS = 401\nexport const FORBIDDEN_STATUS = 403\nexport const NOT_FOUND_STATUS = 404\nexport const NOT_ACCEPTABLE_STATUS = 406\nexport const SERVER_INTERNAL_STATUS = 500\n// just whatever\nexport const DEFAULT_PORT_NUM = 6557\n// headers\nexport const CSRF_HEADER_KEY = 'X-CSRF-Token'\nexport const ORIGIN_HEADER_KEYS = ['Origin']\nexport const WILD_CARD_CHAR = '*'\n\n", "// the constants file is gettig too large\n// we need to split up and group the related constant in one file\n// also it makes the other module easiler to id what they are importing\n// use throughout the clients\nexport const SOCKET_PING_EVENT_NAME = '__ping__' // when init connection do a ping\nexport const SWITCH_USER_EVENT_NAME = '__switch__'\nexport const LOGIN_EVENT_NAME = '__login__'\nexport const LOGOUT_EVENT_NAME = '__logout__'\n// when ws switch on standalone mode then we add this event to allow\n// perform a standalone login method\nexport const SA_LOGIN_EVENT_NAME = '__standalone_login__'\n\n// when we receive the token and decode the userdata\n// we will inject two more properties into the userdata object\nexport const SOCKET_CLIENT_ID_KEY = '__socket_client_id_key__'\nexport const SOCKET_CLIENT_TS_KEY = '__socket_client_ts_key__'\n// at the moment we only have __logout__ regardless enableAuth is enable\n// this is incorrect, because logout suppose to come after login\n// and it should only logout from auth nsp, instead of clear out the\n// connection, the following new event @1.9.2 will correct this edge case\n// although it should never happens, but in some edge case might want to\n// disconnect from the current server, then re-establish connection later\nexport const CONNECT_EVENT_NAME = '__connect__'\n// we still need the connected event because after the connection establish \n// we need to change a state within the client to let the front end know that \n// it's current hook up to the server but we don't want to loop back the client \n// inside the setup phrase, intead just trigger a connected event and the listener \n// setup this property \nexport const CONNECTED_EVENT_NAME = '__connected__'\nexport const DISCONNECT_EVENT_NAME = '__disconnect__'\n// instead of using an event name in place of resolverName in the param\n// we use this internal resolverName instead, and in type using the event names\nexport const INTERCOM_RESOLVER_NAME = '__intercom__'\n// group the inter communcation event name in one then for the server\n// to create a handler to handle this kind of event\n// export const INTER_COM_EVENT_NAME = '__inter_com__'\nexport const INTER_COM_EVENT_NAMES = [\n  CONNECT_EVENT_NAME,\n  SWITCH_USER_EVENT_NAME,\n  DISCONNECT_EVENT_NAME\n]\n// for ws servers\nexport const WS_REPLY_TYPE = '__reply__'\nexport const WS_EVT_NAME = '__event__'\nexport const WS_DATA_NAME = '__data__'\nexport const WS_IS_REPLY_KEYS = [\n  WS_REPLY_TYPE,\n  WS_EVT_NAME,\n  WS_DATA_NAME\n]\n\n// for ws client, 1.9.3 breaking change to name them as FN instead of PROP\nexport const ON_MESSAGE_FN_NAME = 'onMessage'\nexport const ON_RESULT_FN_NAME = 'onResult' // this will need to be internal from now on\nexport const ON_ERROR_FN_NAME = 'onError'\nexport const ON_READY_FN_NAME = 'onReady'\nexport const ON_LOGIN_FN_NAME = 'onLogin' // new @1.8.6\n// the actual method name client.resolverName.send\nexport const SEND_MSG_FN_NAME = 'send'\nexport const EMIT_MSG_FN_NAME = 'emit' // this is just an alias to send\nexport const ON_MSG_FN_NAME = 'on'\nexport const TO_MSG_FN_NAME = 'to'\n// this one is for nodeClient inject into the resolver\nexport const CLIENT_PROP_NAME = 'client'\nexport const USERDATA_PROP_NAME = 'userdata'\n\n// this is somewhat vague about what is suppose to do\nexport const EMIT_REPLY_TYPE = 'emit_reply'\n// this is a new event for a may be feature\nexport const EMIT_SEND_TYPE = 'emit_send' \nexport const ACKNOWLEDGE_REPLY_TYPE = 'emit_acknowledge'\n// this is for inter communication \nexport const INTER_EMIT_SEND_TYPE = 'inter_emit_send'\nexport const INTER_EMIT_REPLY_TYPE = 'inter_emit_reply'\n\nexport const NSP_GROUP = 'nspGroup'\nexport const PUBLIC_NAMESPACE = 'publicNamespace'\n\nexport const JS_WS_SOCKET_IO_NAME = 'socket.io'\nexport const JS_WS_NAME = 'ws'\nexport const JS_PRIMUS_NAME = 'primus'\nexport const GO_WS_COOLPY7_NAME = 'coolpy7'\n\n\n// this is the default time to wait for reply if exceed this then we\n// trigger an error --> 5 seconds\nexport const DEFAULT_WS_WAIT_TIME = 5000\nexport const DEFAULT_RETRY_TIME = 3000 // 1.9.0\nexport const TIMEOUT_ERR_MSG = 'timeout'\nexport const NOT_LOGIN_ERR_MSG = 'NOT LOGIN'\n// for crypto operation\nexport const BASE64_FORMAT = 'base64'\nexport const HEX_FORMAT = 'hex'\nexport const UTF8_FORMAT = 'utf8'\nexport const RSA_FORMATS = [\n  BASE64_FORMAT,\n  HEX_FORMAT\n]\nexport const RSA_ALGO = 'RS256'\nexport const HSA_ALGO = 'HS256'\nexport const JWT_SUPPORT_ALGOS = [\n  RSA_ALGO,\n  HSA_ALGO\n]\nexport const RSA_PRIVATE_KEY_HEADER = 'BEGIN RSA PRIVATE KEY'\nexport const RSA_MIN_MODULE_LEN = 1024\nexport const RSA_MAX_MODULE_LEN = 4096\nexport const TOKEN_PARAM_NAME = 'token'\nexport const IO_ROUNDTRIP_LOGIN = 'roundtip'\nexport const IO_HANDSHAKE_LOGIN = 'handshake'\nexport const IO_LOGIN_METHODS = [\n  IO_ROUNDTRIP_LOGIN,\n  IO_HANDSHAKE_LOGIN\n]\n\nexport const PEM_EXT = 'pem'\nexport const PUBLIC_KEY_NAME = 'publicKey'\nexport const PRIVATE_KEY_NAME = 'privateKey'\n\nexport const DEFAULT_PUBLIC_KEY_FILE = [PUBLIC_KEY_NAME, PEM_EXT].join('.')\nexport const DEFAULT_PRIVATE_KEY_FILE = [PRIVATE_KEY_NAME, PEM_EXT].join('.')\n\nexport const NSP_AUTH_CLIENT = 'nspAuthClient'\nexport const NSP_CLIENT = 'nspClient'\n\n// this is the value for TOKEN_DELIVER_LOCATION_PROP_KEY\nexport const TOKEN_IN_HEADER = 'header'\nexport const TOKEN_IN_URL = 'url'\n\n", "// group all the constants one place\nimport {\n  NOT_ACCEPTABLE_STATUS,\n  UNAUTHORIZED_STATUS,\n  FORBIDDEN_STATUS,\n  NOT_FOUND_STATUS,\n  SERVER_INTERNAL_STATUS,\n  NO_STATUS_CODE,\n  NO_ERROR_MSG\n} from '@jsonql/constants'\n\nconst UNKNOWN_ERROR = 'unknown_error'\nconst JSONQL_ERRORS_INFO = '__PLACEHOLDER__'\n\nexport {\n  NOT_ACCEPTABLE_STATUS,\n  UNAUTHORIZED_STATUS,\n  FORBIDDEN_STATUS,\n  NOT_FOUND_STATUS,\n  SERVER_INTERNAL_STATUS,\n  NO_STATUS_CODE,\n  NO_ERROR_MSG,\n  // ours\n  UNKNOWN_ERROR,\n  JSONQL_ERRORS_INFO\n}\n", "import { NOT_ACCEPTABLE_STATUS } from '../constants'\n/**\n * This is a custom error to throw when server throw a 406\n * This help us to capture the right error, due to the call happens in sequence\n * @param {string} message to tell what happen\n * @param {mixed} extra things we want to add, 500?\n */\nexport default class Jsonql406Error extends Error {\n  detail: any\n  className: string\n\n  constructor(...args: any[]) {\n    super(...args)\n    this.message = args[0]\n    this.detail = args[1]\n    // We can't access the static name from an instance\n    // but we can do it like this\n    this.className = Jsonql406Error.name\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, Jsonql406Error)\n    }\n  }\n\n  static get statusCode() {\n    return NOT_ACCEPTABLE_STATUS\n  }\n\n}\n", "import { SERVER_INTERNAL_STATUS } from '../constants'\n\n/**\n * This is a custom error to throw when server throw a 500\n * This help us to capture the right error, due to the call happens in sequence\n * @param {string} message to tell what happen\n * @param {mixed} extra things we want to add, 500?\n */\nexport default class Jsonql500Error extends Error {\n  detail: any\n  className: string\n\n  constructor(...args: any[]) {\n    super(...args)\n\n    this.message = args[0]\n    this.detail = args[1]\n\n    this.className = Jsonql500Error.name\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, Jsonql500Error)\n    }\n  }\n\n  static get statusCode() {\n    return SERVER_INTERNAL_STATUS\n  }\n}\n", "import { FORBIDDEN_STATUS } from '../constants'\n/**\n * this is the 403 Forbidden error\n * that means this user is not login\n * use the 401 for try to login and failed\n * @param {string} message to tell what happen\n * @param {mixed} extra things we want to add, 500?\n */\nexport default class JsonqlForbiddenError extends Error {\n  detail: any\n  className: string\n\n  constructor(...args: any[]) {\n    super(...args)\n    this.message = args[0]\n    this.detail = args[1]\n\n    this.className = JsonqlForbiddenError.name;\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, JsonqlForbiddenError)\n    }\n  }\n\n  static get statusCode() {\n    return FORBIDDEN_STATUS\n  }\n}\n", "import { UNAUTHORIZED_STATUS  } from '../constants'\n/**\n * This is a custom error to throw when pass credential but fail\n * This help us to capture the right error, due to the call happens in sequence\n * @param {string} message to tell what happen\n * @param {mixed} extra things we want to add, 500?\n */\nexport default class JsonqlAuthorisationError extends Error {\n  detail: any\n  className: string\n\n  constructor(...args: any[]) {\n    super(...args)\n    this.message = args[0]\n    this.detail = args[1]\n\n    this.className = JsonqlAuthorisationError.name;\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, JsonqlAuthorisationError)\n    }\n  }\n\n  static get statusCode() {\n    return UNAUTHORIZED_STATUS\n  }\n\n}\n", "import { UNAUTHORIZED_STATUS } from '../constants'\n\n/**\n * This is a custom error when not supply the credential and try to get contract\n * This help us to capture the right error, due to the call happens in sequence\n * @param {string} message to tell what happen\n * @param {mixed} extra things we want to add, 500?\n */\nexport default class JsonqlContractAuthError extends Error {\n  detail: any\n  className: string\n\n  constructor(...args: any[]) {\n    super(...args)\n    this.message = args[0]\n    this.detail = args[1]\n\n    this.className = JsonqlContractAuthError.name\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, JsonqlContractAuthError)\n    }\n  }\n\n  static get statusCode() {\n    return UNAUTHORIZED_STATUS\n  }\n\n}\n", "import { SERVER_INTERNAL_STATUS } from '../constants'\n/**\n * This is a custom error to throw when the resolver throw error and capture inside the middleware\n * This help us to capture the right error, due to the call happens in sequence\n * @param {string} message to tell what happen\n * @param {mixed} extra things we want to add, 500?\n */\nexport default class JsonqlResolverAppError extends Error {\n  detail: any\n  className: string\n\n  constructor(...args: any[]) {\n    super(...args)\n\n    this.message = args[0]\n    this.detail = args[1]\n\n    this.className = JsonqlResolverAppError.name\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, JsonqlResolverAppError)\n    }\n  }\n\n  static get statusCode() {\n    return SERVER_INTERNAL_STATUS\n  }\n}\n", "import { NOT_FOUND_STATUS } from '../constants'\n/**\n * This is a custom error to throw when could not find the resolver\n * This help us to capture the right error, due to the call happens in sequence\n * @param {string} message to tell what happen\n * @param {mixed} extra things we want to add, 500?\n */\nexport default class JsonqlResolverNotFoundError extends Error {\n  detail: any\n  className: string\n\n  constructor(...args: any[]) {\n    super(...args)\n\n    this.message = args[0]\n    this.detail = args[1]\n\n    this.className = JsonqlResolverNotFoundError.name;\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, JsonqlResolverNotFoundError);\n    }\n  }\n\n  static get statusCode() {\n    return NOT_FOUND_STATUS\n  }\n}\n", "// this get throw from within the checkOptions when run through the enum failed\nexport default class JsonqlEnumError extends Error {\n  detail: any\n  className: string\n\n  constructor(...args: any[]) {\n    super(...args)\n\n    this.message = args[0]\n    this.detail = args[1]\n\n    this.className = JsonqlEnumError.name;\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, JsonqlEnumError)\n    }\n  }\n\n}\n", "// this will throw from inside the checkOptions\nexport default class JsonqlTypeError extends Error {\n  detail: any\n  className: string\n\n  constructor(...args: any[]) {\n    super(...args)\n\n    this.message = args[0]\n    this.detail = args[1]\n\n    this.className = JsonqlTypeError.name\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, JsonqlTypeError)\n    }\n  }\n}\n", "// allow supply a custom checker function\n// if that failed then we throw this error\nexport default class JsonqlCheckerError extends Error {\n  detail: any\n  className: string\n\n  constructor(...args: any) {\n    super(...args)\n    this.message = args[0]\n    this.detail = args[1]\n\n    this.className = JsonqlCheckerError.name\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, JsonqlCheckerError)\n    }\n  }\n}\n", "// custom validation error class\n// when validaton failed\n// should there also be a errors result somewhere \n\nexport default class JsonqlValidationError extends Error {\n  detail: any\n  className: string\n\n  constructor(...args: any[]) {\n    super(...args)\n\n    this.message = args[0]\n    this.detail = args[1]\n\n    this.className = JsonqlValidationError.name;\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, JsonqlValidationError)\n    }\n  }\n\n}\n", "import { NO_STATUS_CODE } from '../constants'\n\n/**\n * This is a custom error to throw whenever a error happen inside the jsonql\n * This help us to capture the right error, due to the call happens in sequence\n * @param {string} message to tell what happen\n * @param {mixed} extra things we want to add, 500?\n */\nexport default class JsonqlError extends Error {\n  detail: any\n  className: string\n\n  constructor(...args: any[]) {\n    super(...args)\n\n    this.message = args[0]\n    this.detail = args[1]\n\n    this.className = JsonqlError.name\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, JsonqlError)\n      // this.detail = this.stack;\n    }\n  }\n\n  static get statusCode() {\n    return NO_STATUS_CODE\n  }\n}\n", "import { SERVER_INTERNAL_STATUS } from '../constants'\n\n// this is from an example from Koa team to use for internal middleware ctx.throw\n// but after the test the res.body part is unable to extract the required data\n// I keep this one here for future reference\n\nexport default class JsonqlServerError extends Error {\n  statusCode: string | number\n  className: string\n\n  constructor(statusCode: string | number, message?: string) {\n    super(message)\n    this.statusCode = statusCode\n    this.className = JsonqlServerError.name\n  }\n\n  static get statusCode() {\n    return SERVER_INTERNAL_STATUS\n  }\n}\n", "// this is a new Error class that is not part of the Jsonql\n// but we will use it in other external modules\n\nexport default class GeneralError extends Error {\n  detail: any\n  className: string\n\n  constructor(...args: any[]) {\n    super(...args)\n\n    this.message = args[0]\n    this.detail = args[1]\n\n    this.className = GeneralError.name\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, GeneralError)\n    }\n  }\n}\n", "import {\n Jsonql406Error,\n Jsonql500Error,\n JsonqlForbiddenError,\n JsonqlAuthorisationError,\n JsonqlContractAuthError,\n JsonqlResolverAppError,\n JsonqlResolverNotFoundError,\n// check options error\n JsonqlEnumError,\n JsonqlTypeError,\n JsonqlCheckerError,\n// share\n JsonqlValidationError,\n JsonqlError,\n JsonqlServerError,\n} from '../base'\nimport { NO_ERROR_MSG } from '../constants'\n\n\n/**\n * If using the instance of could not find the actual error then\n * we need to use a different way to analysis the error object to find the exact\n * Error type\n */\n /*\nfunction getErrorByObject(e: any, msg: any, detail: any) {\n  // @TODO\n}\n*/\n\n/**\n * this will put into generator call at the very end and catch\n * the error throw from inside then throw again\n * this is necessary because we split calls inside and the throw\n * will not reach the actual client unless we do it this way\n */\nexport default function finalCatch(e: any) {\n  // this is a hack to get around the validateAsync not actually throw error\n  // instead it just rejected it with the array of failed parameters\n  if (Array.isArray(e)) {\n    // if we want the message then I will have to create yet another function\n    // to wrap this function to provide the name prop\n    throw new JsonqlValidationError('', e)\n  }\n  const msg = e.message || NO_ERROR_MSG\n  const detail = e.detail || e\n  // @BUG the instance of not always work for some reason!\n  // need to figure out a better way to find out the type of the error\n  switch (true) {\n    case e instanceof Jsonql406Error:\n      throw new Jsonql406Error(msg, detail)\n    case e instanceof Jsonql500Error:\n      throw new Jsonql500Error(msg, detail)\n    case e instanceof JsonqlForbiddenError:\n      throw new JsonqlForbiddenError(msg, detail)\n    case e instanceof JsonqlAuthorisationError:\n      throw new JsonqlAuthorisationError(msg, detail)\n    case e instanceof JsonqlContractAuthError:\n      throw new JsonqlContractAuthError(msg, detail)\n    case e instanceof JsonqlResolverAppError:\n      throw new JsonqlResolverAppError(msg, detail)\n    case e instanceof JsonqlResolverNotFoundError:\n      throw new JsonqlResolverNotFoundError(msg, detail)\n    case e instanceof JsonqlEnumError:\n      throw new JsonqlEnumError(msg, detail)\n    case e instanceof JsonqlTypeError:\n      throw new JsonqlTypeError(msg, detail)\n    case e instanceof JsonqlCheckerError:\n      throw new JsonqlCheckerError(msg, detail)\n    case e instanceof JsonqlValidationError:\n      throw new JsonqlValidationError(msg, detail)\n    case e instanceof JsonqlServerError:\n      throw new JsonqlServerError(msg, detail)\n    default:\n      throw new JsonqlError(msg, detail)\n  }\n}\n", "// just a simple util method to return the error based on the status code\nimport {\n  UNAUTHORIZED_STATUS,\n  FORBIDDEN_STATUS,\n  NOT_FOUND_STATUS,\n  NOT_ACCEPTABLE_STATUS,\n  SERVER_INTERNAL_STATUS\n} from '../constants'\n\n/**\n * use the status code to find the right type of error \n */\nexport default function getErrorByStatus(statusCode: string | number, contract = false): string {\n  switch (statusCode) {\n    case UNAUTHORIZED_STATUS:\n      return contract ? 'JsonqlContractAuthError' : 'JsonqlAuthorisationError'\n    case FORBIDDEN_STATUS:\n      return 'JsonqlForbiddenError'\n    case NOT_FOUND_STATUS:\n      return 'JsonqlResolverNotFoundError'\n    case NOT_ACCEPTABLE_STATUS:\n      return 'Jsonql406Error'\n    case SERVER_INTERNAL_STATUS:\n      return 'Jsonql500Error'\n    default:\n      return 'JsonqlError'\n  }\n}\n", "// get error name by instance\nimport { UNKNOWN_ERROR } from '../constants'\n\n/**\n * @param {array} errs list of errors to compare from\n * @param {object} e the error captured\n * @return {array} filtered with name as value\n */\nfunction mapErrToName(errs: any[], e: any): Array<string> {\n\n  return errs.filter((err: any) => e instanceof err)\n    .map((err: any) => err.name)\n}\n\n/**\n * just what the name said\n * default return the UNKNOWN_ERROR\n */\nexport function getErrorNameByInstance(errs: any[], e: any) {\n  let error = mapErrToName(errs, e)\n\n  return error.length ? error[0] : UNKNOWN_ERROR\n}\n\n/**\n * the same as above with a default JsonqlError as default\n */\nexport function getErrorNameByInstanceWithDefault(errs: any[], e: any): string {\n  let name = getErrorNameByInstance(errs, e)\n\n  return name === UNKNOWN_ERROR ? 'JsonqlError' : name\n}\n"],
  "mappings": "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",
  "names": []
}
